buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'com.bmuschko.nexus' version '2.3.1'
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    version = '1.11.1'

    group = 'de.bwaldvogel'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation group: 'org.slf4j', name: 'slf4j-api', version: 'latest.release'

        testImplementation group: 'junit', name: 'junit', version: 'latest.release'
        testImplementation group: 'org.assertj', name: 'assertj-core', version: 'latest.release'
        testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: 'latest.release'
        testRuntimeOnly group: 'org.slf4j', name: 'jcl-over-slf4j', version: 'latest.release'

        components.all { ComponentMetadataDetails details ->
            details.statusScheme = ['candidate', 'release']
            if (details.id.version =~ /(?i).+(-|\.)(CANDIDATE|RC|BETA|ALPHA).*/) {
                details.status = 'candidate'
            } else {
                details.status = 'release'
            }
        }
    }

    test {
        maxHeapSize = "256m"
        systemProperties['io.netty.leakDetectionLevel'] = 'advanced'
    }

    dependencyLocking {
        lockAllConfigurations()
    }

    task resolveAndLockAll {
        doFirst {
            assert gradle.startParameter.writeDependencyLocks
        }
        doLast {
            configurations.findAll {
                // Add any custom filtering on the configurations to be resolved
                it.canBeResolved
            }.each { it.resolve() }
        }
    }
}

ext {
    title = 'mongo-java-server'
    url = 'https://github.com/bwaldvogel/mongo-java-server'
}

jar {
    manifest {
        attributes 'Implementation-Title': title, 'Implementation-Version': version
    }
}

allprojects {
    apply plugin: 'com.bmuschko.nexus'

    def projectName = project.name

    modifyPom {
        project {
            groupId        'de.bwaldvogel'
            artifactId     projectName
            name           title
            description    'Fake implementation of MongoDB in Java that speaks the wire protocol.'
            url            url
            inceptionYear '2012'

            scm {
                url 'git@github.com:bwaldvogel/mongo-java-server.git'
                connection 'scm:git:git@github.com:bwaldvogel/mongo-java-server.git'
                developerConnection 'scm:git:git@github.com:bwaldvogel/mongo-java-server.git'
            }

            licenses {
                license {
                    name 'The BSD License'
                    url 'http://www.opensource.org/licenses/bsd-license.php'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'bwaldvogel'
                    name 'Benedikt Waldvogel'
                    email 'mail@bwaldvogel.de'
                }
            }
        }
    }

    extraArchive {
        sources = true
        tests = false
        javadoc = true
    }

    nexus {
        sign = true
    }
}

wrapper {
    gradleVersion = "5.0"
    distributionType = Wrapper.DistributionType.ALL
}

task jacocoMerge(type: JacocoMerge) {
    subprojects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn subprojects.test, jacocoMerge

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

javadoc {
    options.addBooleanOption('html5', true)
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
}

dependencies {
    api project(':mongo-java-server-core')
    api project(':mongo-java-server-memory-backend')
}

// vim: set ts=4 sw=4 et:
